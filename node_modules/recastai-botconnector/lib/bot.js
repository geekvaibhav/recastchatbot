'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _message = require('./message');

var _message2 = _interopRequireDefault(_message);

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bot = function () {
  function Bot(options) {
    _classCallCheck(this, Bot);

    this.apiDomain = 'https://api-botconnector.recast.ai';
    this.botId = options.botId;
    this.userSlug = options.userSlug;
    this.userToken = options.userToken;
  }

  _createClass(Bot, [{
    key: 'listen',
    value: function listen(req) {
      var options = {
        botId: this.botId,
        apiDomain: this.apiDomain,
        senderId: req.body.senderId,
        chatId: req.body.chatId,
        content: req.body.message,
        userSlug: this.userSlug,
        userToken: this.userToken
      };
      var message = new _message2.default(options);
      this.handler(message);
    }
  }, {
    key: 'sendMessage',
    value: function sendMessage(payload, conversation, senderId) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _superagent2.default.post(_this.apiDomain + '/users/' + _this.userSlug + '/bots/' + _this.botId + '/conversations/' + conversation + '/messages').set('Authorization', 'Token ' + _this.userToken).send({ messages: [].concat(payload), senderId: senderId }).end(function (err, res) {
          if (err) {
            return reject(err);
          }
          return resolve(res);
        });
      });
    }
  }, {
    key: 'broadcast',
    value: function broadcast(payload) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _superagent2.default.post(_this2.apiDomain + '/users/' + _this2.userSlug + '/bots/' + _this2.botId + '/messages').set('Authorization', 'Token ' + _this2.userToken).send({ messages: [].concat(payload) }).end(function (err, res) {
          if (err) {
            return reject(err);
          }
          return resolve(res);
        });
      });
    }
  }, {
    key: 'onTextMessage',
    value: function onTextMessage(handler) {
      this.handler = handler;
    }
  }]);

  return Bot;
}();

module.exports = Bot;