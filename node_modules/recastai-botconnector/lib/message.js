'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Message = function () {
  function Message(options) {
    _classCallCheck(this, Message);

    this.botId = options.botId;
    this.apiDomain = options.apiDomain;
    this.userSlug = options.userSlug;
    this.userToken = options.userToken;
    this.senderId = options.senderId;
    this.content = options.content;
    this.chatId = options.chatId;
    this.replies = [];
  }

  _createClass(Message, [{
    key: 'addReply',
    value: function addReply(json) {
      if (json) {
        this.replies = this.replies.concat(json);
      }
    }
  }, {
    key: 'reply',
    value: function reply(payload) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        if (payload) {
          _this.replies = _this.replies.concat(payload);
        }
        _superagent2.default.post(_this.apiDomain + '/users/' + _this.userSlug + '/bots/' + _this.botId + '/conversations/' + _this.content.conversation + '/messages').set('Authorization', 'Token ' + _this.userToken).send({ messages: _this.replies, senderId: _this.senderId }).end(function (err, res) {
          if (err) {
            return reject(err);
          }
          _this.replies = [];
          return resolve(res);
        });
      });
    }
  }]);

  return Message;
}();

module.exports = Message;